# -*- coding: utf-8 -*-
"""ProjectDashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fqMveO9tGn-LAAaB-YHbdN2N6yGhcRvX
"""

#Import Libraries
import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

def load_data():
    try:
        df = pd.read_csv('netflix_titles.csv')
        st.success("Data loaded successfully!")
        return df
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return None

#Page Configuration
st.set_page_config(
    page_title="US Population Dashboard",
    page_icon="ðŸŽ¬", # Clapperboard emoji
    layout="wide",
    initial_sidebar_state="expanded")

alt.themes.enable("dark")

#Add a sidebar for the selection of differents graphs
with st.sidebar:
    st.title('ðŸŽ¬ Netflix Data Visualization')

    graph_options = [
        "Release Year Distribution",
        "Distribution of Content Types",
        "Top 13 Countries with Most Content",
        "Trend of Releases Over Time",
        "Type vs Rating",
        "Filter Only Movies",
        "Choropleth Map: Titles by Country",
        "Distribution of Genres by Country"
    ]
    selected_graph = st.selectbox('Select a Graph', graph_options)

def clean_data(df):
    if df is None or df.empty:
        st.error("DataFrame is empty or not loaded properly.")
        return None

    required_columns = ['release_year', 'type', 'country', 'rating', 'duration']
    for column in required_columns:
        if column not in df.columns:
            st.error(f"The column '{column}' is missing from the DataFrame")
            return None

    df = df.dropna(subset=required_columns)
    if df.empty:
        st.error("The DataFrame is empty after cleaning.")
        return None

    return df

# Load your data
df = load_data()

# Initialize df_cleaned as None first to avoid NameError
df_cleaned = None

if df is not None:
    df_cleaned = clean_data(df)

# Now this is safe
if df_cleaned is None:
    st.error("The data is not available for further processing.")

# Release Year Distribution
# Both movies and TV shows increased after 2010, peaking around 2018-2019.
def release_year_distribution(df):
    if df is None or df.empty:
        st.error("DataFrame is empty or not loaded properly.")
        return

    if 'release_year' not in df.columns:
        st.error("The column 'release_year' is missing from the DataFrame.")
        return

    fig, ax = plt.subplots(figsize=(10,6))

    sns.histplot(df['release_year'], color='r', kde=True, ax=ax)
    ax.set_title('Distribution of Release Years', size=18)
    ax.set_xlabel('Release Year', size=14)
    ax.set_ylabel('Density', size=14)

    st.pyplot(fig)

# Distribution of content types
# movies are dominated with more than 6000
def content_type_distribution(df):
    if df is None or df.empty:
        st.error("DataFrame is empty or not loaded properly.")
        return
    if 'type' not in df.columns:
        st.error("The column 'type' is missing from the DataFrame.")
        return
    fig, ax = plt.subplots(figsize=(10,6))
    sns.countplot(data=df, x='type', palette=['skyblue', 'orange'], ax=ax)
    ax.set_title('Count of Movies vs TV Shows on Netflix')
    st.pyplot(fig)

# Top 13 countries with most content
# we can notice that United States and India dominate both categories

def top_13_countries(df):
    if df is None or df.empty:
        return

    if 'country' not in df.columns:
        st.error("The column 'country' is missing from the DataFrame.")
        return

    fig, ax = plt.subplots(figsize=(10,6))
    top_countries = df['country'].value_counts().head(13)
    colors = ['skyblue', 'orange', 'green', 'red', 'purple', 'brown', 'pink', 'gray', 'olive', 'cyan', 'magenta', 'gold', 'lime']
    top_countries.plot(kind='bar', title='Top 13 Content Producing Countries', color=colors, ax=ax)
    ax.set_ylabel('Number of Titles')
    st.pyplot(fig)

# Trend of releases over time
# Around 2018 and 2019 are the years with the mist numbers of titles released over the period
def trend_of_releases(df):
    if df is None or df.empty:
        return

    fig, ax = plt.subplots(figsize=(12,5))
    df['release_year'].value_counts().sort_index().plot(kind='line', ax=ax, title='Number of Titles Released per Year')
    ax.set_xlabel('Year')
    ax.set_ylabel('Number of Titles')
    st.pyplot(fig)

# Type vs Rating
# we can notice that Movies are dominate in almost all catgories
#TV-MA is the most common rating overall, especially for TV Shows.
def type_vs_rating(df):
    if df is None or df.empty:
        return

    fig, ax = plt.subplots(figsize=(12,6))
    sns.countplot(data=df, x='rating', hue='type', order=df['rating'].value_counts().index, ax=ax)
    ax.set_title('Distribution of Ratings by Content Type')
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45)
    ax.legend(title='Type')
    st.pyplot(fig)

# Filter only Movies
#Most Netflix movies are 90â€“110 minutes long
def filter_only_movies(df):
    if df is None or df.empty:
        return

    fig, ax = plt.subplots(figsize=(10,6))
    movies_df = df[df['type'] == 'Movie'].copy()
    movies_df['duration_minutes'] = movies_df['duration'].str.extract('(\d+)').astype(float)
    sns.histplot(data=movies_df, x='duration_minutes', bins=30, kde=True, ax=ax)
    ax.set_title('Distribution of Movie Durations (in minutes)')
    ax.set_xlabel('Duration (minutes)')
    st.pyplot(fig)

# Multivariate Analysis
# release_year vs duration_minutes: Typically weak or no correlation expected.
# type_encoded vs duration_minutes: May show a negative correlation, since TV Shows don't usually have a numerical duration in minutes
# Ensure duration_minutes and type_encoded exist
def multivariate_analysis(df):
    if df is None or df.empty:
        return

    fig, ax = plt.subplots(figsize=(10,6))
    df['duration_minutes'] = df['duration'].str.extract('(\d+)').astype(float)
    df['type_encoded'] = df['type'].map({'Movie': 0, 'TV Show': 1})
    numerical_df = df[['release_year', 'duration_minutes', 'type_encoded']].dropna()

    sns.heatmap(numerical_df.corr(), annot=True, square=True, cmap='RdBu', vmin=-1, vmax=1, ax=ax)
    ax.set_title('Correlations Between Netflix Variables', size=18)
    ax.set_xticklabels(ax.get_xticklabels(), size=13)
    ax.set_yticklabels(ax.get_yticklabels(), size=13)
    st.pyplot(fig)

# Distributoin of gender by country
def choropleth_map(df):
        if df is None or df.empty:
            return
        if 'country' not in df.columns:
            st.error("The column 'country' is missing from the DataFrame.")
            return
        country_count = df['country'].value_counts().reset_index()
        country_count.columns = ['country', 'count']
        fig = px.choropleth(country_count,
                            locations="country",
                            locationmode='country names',
                            color="count",
                            color_continuous_scale="Viridis",
                            labels={'count': 'Number of Titles'},
                            title="Number of Netflix Titles by Country")
        st.plotly_chart(fig)

def genres_by_country(df):
        if df is None or df.empty:
            return

        if 'country' not in df.columns or 'listed_in' not in df.columns:
            st.error("The columns 'country' or 'listed_in' are missing from the DataFrame.")
            return

        df['genres'] = df['listed_in'].str.split(',').apply(lambda x: [i.strip() for i in x])  # Separar gÃ©neros
        df_expanded = df.explode('genres')

        genre_country_count = pd.crosstab(df_expanded['country'], df_expanded['genres'])

        fig, ax = plt.subplots(figsize=(12,8))
        sns.heatmap(genre_country_count, annot=True, cmap='Blues', ax=ax, cbar_kws={'label': 'Number of Titles'})
        ax.set_title('Distribution of Genres by Country')
        st.pyplot(fig)

if df_cleaned is not None:
    if selected_graph == "Release Year Distribution":
        release_year_distribution(df_cleaned)
    elif selected_graph == "Distribution of Content Types":
        content_type_distribution(df_cleaned)
    elif selected_graph == "Top 13 Countries with Most Content":
        top_13_countries(df_cleaned)
    elif selected_graph == "Trend of Releases Over Time":
        trend_of_releases(df_cleaned)
    elif selected_graph == "Type vs Rating":
        type_vs_rating(df_cleaned)
    elif selected_graph == "Filter Only Movies":
        filter_only_movies(df_cleaned)
    elif selected_graph == "Multivariate Analysis":
        multivariate_analysis(df_cleaned)
    elif selected_graph == "Distribution of Genres by Country":
        genres_by_country(df_cleaned)

import plotly.express as px

def choropleth_map(df):
    # Verificar si el DataFrame tiene la columna 'country'
    if df is None or df.empty:
        st.error("DataFrame is empty or not loaded properly.")
        return

    if 'country' not in df.columns:
        st.error("The column 'country' is missing from the DataFrame.")
        return

    # Agrupar los datos por paÃ­s y contar el nÃºmero de tÃ­tulos por paÃ­s
    country_count = df['country'].value_counts().reset_index()
    country_count.columns = ['country', 'count']

    # Crear el Choropleth map
    fig = px.choropleth(country_count,
                        locations="country",
                        locationmode='country names',
                        color="count",
                        color_continuous_scale="Viridis",
                        labels={'count': 'Number of Titles'},
                        title="Number of Netflix Titles by Country")

    # Mostrar el mapa
    st.plotly_chart(fig)