# -*- coding: utf-8 -*-
"""Dashboard_netflix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fqMveO9tGn-LAAaB-YHbdN2N6yGhcRvX
"""

#Import Libraries
import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px

#Page Configuration
st.set_page_config(
    page_title="US Population Dashboard",
    page_icon="ðŸŽ¬", # Clapperboard emoji
    layout="wide",
    initial_sidebar_state="expanded")

alt.themes.enable("dark")

df_reshaped = pd.read_csv('netflix_titles.csv')

df_reshaped= pd.read_csv('netflix_titles.csv')

#Add a sidebar
with st.sidebar:
    st.title('ðŸŽ¬ Netflix Titles')

    year_list = list(df_reshaped.release_year.unique())[::-1]

    selected_year = st.selectbox('Select a year', year_list, index=len(year_list)-1)
    df_selected_year = df_reshaped[df_reshaped.release_year == selected_year]
    df_selected_year_sorted = df_selected_year.sort_values(by="title", ascending=True)  # Sort by title

    color_theme_list = ['blues', 'cividis', 'greens', 'inferno', 'magma', 'plasma', 'reds', 'rainbow', 'turbo', 'viridis']
    selected_color_theme = st.selectbox('Select a color theme', color_theme_list)

# Plot and chart types for
# released_year (y-axis) and type (x-axis)
def make_heatmap(input_df, input_y, input_x, input_color, input_color_theme):
    # Aggregate data for heatmap
    heatmap_data = input_df.groupby([input_y, input_x]).size().reset_index(name='count')

    heatmap = alt.Chart(heatmap_data).mark_rect().encode(
        y=alt.Y(f'{input_y}:O', axis=alt.Axis(title="Release Year", titleFontSize=18, titlePadding=15, titleFontWeight=900, labelAngle=0)),
        x=alt.X(f'{input_x}:O', axis=alt.Axis(title="", titleFontSize=18, titlePadding=15, titleFontWeight=900)),
        color=alt.Color(f'count:Q',  # Use 'count' for color intensity
                         legend=None,
                         scale=alt.Scale(scheme=input_color_theme)),
        stroke=alt.value('black'),
        strokeWidth=alt.value(0.25),
    ).properties(width=900
    ).configure_axis(
        labelFontSize=12,
        titleFontSize=12
    )
    return heatmap

# Assuming your DataFrame is named 'df_reshaped'
heatmap = make_heatmap(df_reshaped, 'release_year', 'type', 'count', 'viridis')  # Replace 'type' with desired column
st.altair_chart(heatmap, use_container_width=True)

# Choropleth map visualizing the number of titles per country
def make_choropleth(input_df, input_id, input_column, input_color_theme):
    # Aggregate data for choropleth
    choropleth_data = input_df.groupby(input_id)[input_column].size().reset_index(name='count')

    choropleth = px.choropleth(choropleth_data, locations=input_id, color='count',
                               color_continuous_scale=input_color_theme,
                               range_color=(0, choropleth_data['count'].max()),
                               scope="world",  # Set scope to "world" for global data
                               labels={'count':'Number of Titles'}
                              )
    choropleth.update_layout(
        template='plotly_dark',
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
        margin=dict(l=0, r=0, t=0, b=0),
        height=350
    )
    return choropleth

# donut chart of  the difference in the number of titles released between two years
def calculate_title_difference(input_df, input_year):
    selected_year_data = input_df[input_df['release_year'] == input_year].reset_index()
    previous_year_data = input_df[input_df['release_year'] == input_year - 1].reset_index()

    # Calculate title count for selected and previous years
    selected_year_count = selected_year_data.groupby('type')['show_id'].count().reset_index(name='selected_year_count')
    previous_year_count = previous_year_data.groupby('type')['show_id'].count().reset_index(name='previous_year_count')

    # Merge the counts based on 'type'
    merged_counts = pd.merge(selected_year_count, previous_year_count, on='type', how='left')

    # Calculate the difference in title counts
    merged_counts['title_difference'] = merged_counts['selected_year_count'] - merged_counts['previous_year_count'].fillna(0)

    return merged_counts[['type', 'title_difference']].sort_values(by="title_difference", ascending=False)

#App layout
col = st.columns((1.5, 4.5, 2), gap='medium')

with col[0]:
    st.markdown('#### Movie vs TV Show Distribution')  # Changed title

    # Calculate title counts for the selected year
    title_counts = df_reshaped[df_reshaped['release_year'] == selected_year]['type'].value_counts()

    # Display metrics for movie and TV show counts
    st.metric(label="Movies", value=title_counts.get('Movie', 0))
    st.metric(label="TV Shows", value=title_counts.get('TV Show', 0))

    # Display donut chart
    donut_chart = make_donut_chart(df_reshaped[df_reshaped['release_year'] == selected_year], 'type')
    st.plotly_chart(donut_chart, use_container_width=True)

# Column 2
with col[1]:
    st.markdown('#### Netflix Titles Heatmap')  # Changed title

    # Assuming your DataFrame is named 'df_reshaped'
    heatmap = make_heatmap(df_reshaped, 'release_year', 'type', 'count', selected_color_theme)  # Replace 'type' with desired column
    st.altair_chart(heatmap, use_container_width=True)

    # Removed choropleth map as it's not relevant to Netflix data

# Coulmn 3
with col[2]:
    st.markdown('#### Top Genres')  # Changed title

    # Group by genre and count titles
    genre_counts = df_reshaped[df_reshaped['release_year'] == selected_year]['listed_in'].str.split(', ').explode().value_counts().reset_index()
    genre_counts.columns = ['Genre', 'Count']

    # Display top genres in a dataframe
    st.dataframe(genre_counts.head(10),  # Display top 10 genres
                 column_order=("Genre", "Count"),
                 hide_index=True,
                 width=None,
                 column_config={
                     "Genre": st.column_config.TextColumn("Genre"),
                     "Count": st.column_config.NumberColumn("Count")
                 })

    with st.expander('About', expanded=True):
        st.write('''
            - Data: Netflix Titles Dataset.
            - This section displays the top genres for the selected year.
            ''')