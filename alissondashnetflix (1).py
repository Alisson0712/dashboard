# -*- coding: utf-8 -*-
"""AlissonDashNetflix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fqMveO9tGn-LAAaB-YHbdN2N6yGhcRvX
"""

#Import Libraries
import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px
import matplotlib.pyplot as plt # Import the matplotlib library

#Page Configuration
st.set_page_config(
    page_title="US Population Dashboard",
    page_icon="üé¨", # Clapperboard emoji
    layout="wide",
    initial_sidebar_state="expanded")

alt.themes.enable("dark")

df_reshaped = pd.read_csv('netflix_titles.csv')

#Add a sidebar on the 13 countries with the most Netflix titles
with st.sidebar:
    st.title('üé¨ Netflix Titles by Country')

    # Get the 13 countries with the most titles
    top_13_countries = df_reshaped['country'].value_counts().head(13).index.tolist()

    # Add a selectbox for choosing a country
    selected_country = st.selectbox('Select a Country', top_13_countries)

    # Filter the DataFrame based on the selected country
    df_selected_country = df_reshaped[df_reshaped['country'] == selected_country]

    # Sort the filtered DataFrame by title
    df_selected_country_sorted = df_selected_country.sort_values(by="title", ascending=True)

    # Color theme selection (unchanged)
    color_theme_list = ['blues', 'cividis', 'greens', 'inferno', 'magma', 'plasma', 'reds', 'rainbow', 'turbo', 'viridis']
    selected_color_theme = st.selectbox('Select a color theme', color_theme_list)

# Plot and chart types for
def make_heatmap(input_df, input_y, input_x, input_color, input_color_theme, selected_country=None):
    # Filter data based on selected country if provided
    if selected_country:
        input_df = input_df[input_df['country'] == selected_country]

    heatmap = alt.Chart(input_df).mark_rect().encode(
        y=alt.Y(f'{input_y}:O', axis=alt.Axis(title="Year", titleFontSize=18, titlePadding=15, titleFontWeight=900, labelAngle=0)),
        x=alt.X(f'{input_x}:O', axis=alt.Axis(title="", titleFontSize=18, titlePadding=15, titleFontWeight=900)),
        color=alt.Color(f'max({input_color}):Q', legend=None, scale=alt.Scale(scheme=input_color_theme)),
        stroke=alt.value('black'),
        strokeWidth=alt.value(0.25),
    ).properties(width=900).configure_axis(labelFontSize=12, titleFontSize=12)

    return heatmap

# Choropleth map visualizing the number of titles per country (updated)
def make_choropleth(input_df, input_id, input_column, input_color_theme):
    # Filter the DataFrame to include only the top 13 countries
    top_13_countries = input_df['country'].value_counts().head(13).index.tolist()
    filtered_df = input_df[input_df['country'].isin(top_13_countries)]

    # Aggregate data for choropleth based on the filtered DataFrame
    choropleth_data = filtered_df.groupby(input_id)[input_column].size().reset_index(name='count')

    choropleth = px.choropleth(choropleth_data, locations=input_id, color='count',
                               color_continuous_scale=input_color_theme,
                               range_color=(0, choropleth_data['count'].max()),
                               scope="world",  # Set scope to "world" for global data
                               labels={'count':'Number of Titles'}
                              )
    choropleth.update_layout(
        template='plotly_dark',
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
        margin=dict(l=0, r=0, t=0, b=0),
        height=350
    )
    return choropleth

# ... (rest of your existing code) ...

# In the section where you call the make_choropleth function:
with col[1]:
    # ... (other code in this column) ...

    # Choropleth map for top 13 countries
    choropleth_map = make_choropleth(df_reshaped, 'country', 'show_id', selected_color_theme)
    st.plotly_chart(choropleth_map, use_container_width=True)

# donut chart of  the difference in the number of titles released between two years
def calculate_country_title_distribution(input_df):
    # Get the 13 countries with the most titles
    top_13_countries = input_df['country'].value_counts().head(13).index.tolist()

    # Filter the DataFrame to include only the top 13 countries
    filtered_df = input_df[input_df['country'].isin(top_13_countries)]

    # Calculate title counts for each country and type
    country_counts = filtered_df.groupby(['country', 'type'])['show_id'].count().reset_index(name='count')

    return country_counts

def describe_country_title_distribution(country_distribution_data):
    """Generates a textual description of the country title distribution.

    Args:
        country_distribution_data: The DataFrame returned by calculate_country_title_distribution.

    Returns:
        A string describing the distribution.
    """

    top_countries = country_distribution_data.groupby('country')['count'].sum().sort_values(ascending=False).head(3).index.tolist()
    description = f"The donut chart displays the distribution of Netflix titles across the top 13 content-producing countries. "

    for country in top_countries:
        country_data = country_distribution_data[country_distribution_data['country'] == country]
        total_count = country_data['count'].sum()
        movie_count = country_data[country_data['type'] == 'Movie']['count'].values[0] if not country_data[country_data['type'] == 'Movie'].empty else 0
        tv_show_count = country_data[country_data['type'] == 'TV Show']['count'].values[0] if not country_data[country_data['type'] == 'TV Show'].empty else 0

        description += f"{country} has the most titles overall with {total_count}, consisting of {movie_count} movies and {tv_show_count} TV shows. "

    description += "The remaining countries have a smaller share of titles, as depicted in the chart."

if __name__ == "__main__":
    #Page Configuration
    st.set_page_config(
        page_title="US Population Dashboard",
        page_icon="üé¨", # Clapperboard emoji
        layout="wide",
        initial_sidebar_state="expanded")
    alt.themes.enable("dark")
    df_reshaped = pd.read_csv('netflix_titles.csv')

# Define las columnas antes de usarlas
col = st.columns((1.5, 4.5, 2), gap='medium')

# Primer columna
with col[0]:
    st.markdown('#### Movie vs TV Show Distribution by Country')

    top_13_countries = df_reshaped['country'].value_counts().head(13).index.tolist()
    filtered_df = df_reshaped[df_reshaped['country'].isin(top_13_countries)]
    title_counts = filtered_df.groupby('country')['type'].value_counts().unstack(fill_value=0)

    for country in top_13_countries:
        st.write(f"**{country}:**")
        st.metric(label="Movies", value=title_counts.loc[country, 'Movie'])
        st.metric(label="TV Shows", value=title_counts.loc[country, 'TV Show'])
        st.write("---")  # Separador entre pa√≠ses

    # Mostrar gr√°fico donut
    donut_chart = make_donut_chart(filtered_df, 'type')
    st.plotly_chart(donut_chart, use_container_width=True)

# Segunda columna
with col[1]:
    st.markdown('#### Netflix Titles Heatmap')

    heatmap = make_heatmap(df_reshaped, 'release_year', 'type', 'count', selected_color_theme)
    st.altair_chart(heatmap, use_container_width=True)

# Tercera columna
with col[2]:
    st.markdown('#### Top Genres (Top 13 Countries)')

    top_13_countries = df_reshaped['country'].value_counts().head(13).index.tolist()
    filtered_df = df_reshaped[df_reshaped['country'].isin(top_13_countries)]

    # Agrupar por g√©nero y contar t√≠tulos
    genre_counts = filtered_df['listed_in'].str.split(', ').explode().value_counts().reset_index()
    genre_counts.columns = ['Genre', 'Count']

    # Mostrar los g√©neros m√°s populares
    st.dataframe(genre_counts.head(10),  # Mostrar los 10 g√©neros principales
                 column_order=("Genre", "Count"),
                 hide_index=True,
                 width=None,
                 column_config={
                     "Genre": st.column_config.TextColumn("Genre"),
                     "Count": st.column_config.NumberColumn("Count")
                 })

    with st.expander('About', expanded=True):
        st.write('''
            - Data: Netflix Titles Dataset.
            - This section displays the top genres for the top 13 countries.
            ''')