# -*- coding: utf-8 -*-
"""Netflix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AgxqbLcxSmdXl7-JR5OEOm0QZTs-wE1W

1. Data Understanding
"""

import numpy as np # linear algebra
import pandas as pd # data manipulation and analysis
import matplotlib.pyplot as plt # data visualization
import seaborn as sns # data visualization
sns.set_style('whitegrid') # set style for visualization
import warnings # ignore warnings
warnings.filterwarnings('ignore')

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('netflix_titles.csv')

df.head()

#returns information about Dataframe, index,and data type
df.info()

df.shape

df.columns

#method generates descriptive statistics for the release year such as count, mean, std, min and max,
# we can notice that the minimun release year is 1925 and the last release year is 2021

df.describe()

# We can notice that the top or most common value is movie with a frecuency of 6131
# Rajiv Chilaka is the most frequent direct of movies with 19 movies counted in the data
# and the most frequent country is United States and show in the data set 2818 times
df.describe(include='O')

"""2. Data Cleaning:The purpose of data cleaning is to get our data ready to analyze and visualize"""

df.isnull().sum()
#When combining .isnull() method with .sum() we can sum up all the missing values for each variables.
# when can notice that we have 2634 missing values in director, 825 missing values in the cloumn of cast
# and 831 missing values in the column of country

df[df.duplicated(keep='first')]
# We dont have duplicated values

df.drop_duplicates(keep='first',inplace=True)

"""3. Data Visualization"""

# Release Year Distribution
# Both movies and TV shows increased after 2010, peaking around 2018-2019.
plt.figure(figsize=(10,6))
sns.distplot(df['release_year'],color='r')  # Use 'release_year' column
plt.title('Distribution of Release Years',size=18)  # Update title
plt.xlabel('Release Year',size=14)  # Update x-axis label
plt.ylabel('Density',size=14)  # Keep y-axis label (or change to 'Frequency')
plt.show()

# Distribution of content types
# movies are dominated with more than 6000
sns.countplot(data=df, x='type', palette=['skyblue', 'orange'])
plt.title('Count of Movies vs TV Shows on Netflix')
plt.show()

# Top 13 countries with most content
# we can notice that United States and India dominate both categories
colors = ['skyblue', 'orange', 'green', 'red', 'purple', 'brown', 'pink', 'gray', 'olive', 'cyan', 'magenta', 'gold', 'lime']
top_countries.plot(kind='bar', title='Top 13 Content Producing Countries', color=colors)
plt.ylabel('Number of Titles')
plt.show()

# Trend of releases over time
# Around 2018 and 2019 are the years with the mist numbers of titles released over the period
df['release_year'].value_counts().sort_index().plot(kind='line', figsize=(12,5), title='Number of Titles Released per Year')
plt.xlabel('Year')
plt.ylabel('Number of Titles')
plt.show()

# Type vs Rating
# we can notice that Movies are dominate in almost all catgories
#TV-MA is the most common rating overall, especially for TV Shows.
plt.figure(figsize=(12,6))
sns.countplot(data=df, x='rating', hue='type', order=df['rating'].value_counts().index)
plt.title('Distribution of Ratings by Content Type')
plt.xticks(rotation=45)
plt.legend(title='Type')
plt.show()

# Filter only Movies
#Most Netflix movies are 90â€“110 minutes long
movies_df = df[df['type'] == 'Movie'].copy()
movies_df['duration_minutes'] = movies_df['duration'].str.extract('(\d+)').astype(float)

plt.figure(figsize=(10,6))
sns.histplot(data=movies_df, x='duration_minutes', bins=30, kde=True)
plt.title('Distribution of Movie Durations (in minutes)')
plt.xlabel('Duration (minutes)')
plt.show()

# Pairplot
# Extract duration in minutes (only works for movies)
df['duration_minutes'] = df['duration'].str.extract('(\d+)').astype(float)

# Encode type as numeric
df['type_encoded'] = df['type'].map({'Movie': 0, 'TV Show': 1})

# Drop rows with missing values in relevant columns
netflix_pairplot_df = df.dropna(subset=['release_year', 'duration_minutes', 'type_encoded'])

# Step 2: Create the Pairplot
sns.pairplot(
    netflix_pairplot_df[['release_year', 'duration_minutes', 'type_encoded']],
    markers="+",
    diag_kind="kde",
    kind='reg',
    plot_kws={
        'line_kws': {'color': '#aec6cf'},
        'scatter_kws': {'alpha': 0.7, 'color': 'red'}
    },
    corner=True
)

plt.suptitle('Netflix Titles Pairplot: Release Year, Duration, and Type (Encoded)', y=1.02)
plt.show()

# Multivariate Analysis
# release_year vs duration_minutes: Typically weak or no correlation expected.
# type_encoded vs duration_minutes: May show a negative correlation, since TV Shows don't usually have a numerical duration in minutes
# Ensure duration_minutes and type_encoded exist
df['duration_minutes'] = df['duration'].str.extract('(\d+)').astype(float)
df['type_encoded'] = df['type'].map({'Movie': 0, 'TV Show': 1})

# Select only numeric columns
numerical_df = df[['release_year', 'duration_minutes', 'type_encoded']].dropna()

# Plot the heatmap
plt.figure(figsize=(10,6))
sns.heatmap(numerical_df.corr(), annot=True, square=True,
            cmap='RdBu', vmin=-1, vmax=1)

plt.title('Correlations Between Netflix Variables', size=18)
plt.xticks(size=13)
plt.yticks(size=13)
plt.show()

"""Step 5: Simple Statistical Analysis"""

# Number of unique directors and actors
print("Unique Directors:", df['director'].nunique())
print("Unique Cast Members:", df['cast'].nunique())

# Most frequent genres, where drama and international movie are dominants with 362 counted in the data
df['listed_in'].value_counts().head(10)